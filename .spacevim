" You can enable the existing layers in space-vim and
" exclude the partial plugins in a certain layer.
" The command Layer is vaild in the function Layers().
" Use exclude option if you don't want the full Layer,
" e.g., Layer 'better-defaults', { 'exclude': 'itchyny/vim-cursorword' }

" Get OS
function! GetRunningOS()
  if has("win32")
    return "win"
  endif
  if has("unix")
    if system('uname')=~'Darwin'
      return "mac"
    else
      return "linux"
    endif
  endif
endfunction

function! Layers()

    Layer 'airline'
    Layer 'fzf'
    Layer 'syntax-checking'
    Layer 'text-align'
    Layer 'deoplete'
    Layer 'unite'
    Layer 'better-defaults', {'exclude': 'dominikduda/vim_current_word'}
    Layer 'file-manager'
    Layer 'ctrlp'
    Layer 'tmux'
    Layer 'chinese'
    Layer 'programming'
    Layer 'editing'

    " Lang
    Layer 'java'
    Layer 'javascript'
    Layer 'html'
    Layer 'markdown'
    Layer 'python'

endfunction

" Put your private plugins here.
function! UserInit()

    " Space has been set as the default leader key,
    " if you want to change it, uncomment and set it here.
    " let g:spacevim_leader = "<\Space>"
    " let g:spacevim_localleader = ','

    " Install private plugins
    " Plug 'extr0py/oni'
    Plug 'mileszs/ack.vim'
    Plug 'benmills/vimux'
    Plug 'rakr/vim-one'
    Plug 'mhinz/vim-grepper', { 'on': ['Grepper', '<plug>(GrepperOperator)'] }
    Plug 'Chiel92/vim-autoformat'

    " deoplete plugin
    Plug 'zchee/deoplete-jedi'
    Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }

    " prettier
    " post install (yarn install | npm install) then load plugin only for editing supported files
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown'] }

    " leader guide
    Plug 'hecal3/vim-leader-guide'
endfunction

" Put your costom configurations here, e.g., change the colorscheme.
function! UserConfig()
    set mouse=a
    "let os = GetRunningOS()

    " airline settting
    " let g:lightline = {
    "   \ 'colorscheme': 'PaperColor',
    "   \ }

    " theme
    colorscheme one
    let g:one_allow_italics = 1 " I love italic for comments
    set background=light " for the light version

    " airline setting
    " If you enable airline layer and have installed the powerline fonts, set it here.
    let g:airline_theme='one'
    let g:airline_powerline_fonts = 0
    let g:airline_left_sep = ''
    let g:airline_right_sep = ''

    set noundofile

    if (has("termguicolors"))
      set termguicolors
    endif

    " AutoFormat
    noremap <F3> :Autoformat<CR>
    let g:formatdef_remark_markdown = '"remark --silent --no-color --setting listItemIndent:1 "'

    " Grepper
    nnoremap <leader>sp :Grepper -tool rg<cr>
    nnoremap <leader>sgp :Grepper -tool grep<cr>

    nmap gs <plug>(GrepperOperator)
    xmap gs <plug>(GrepperOperator)

    " Search
    nmap <enter> :.cc<Cr> " oepn error
    nmap <leader>ri :copen<Cr> " resume error buffer

    " Allow backspace and cursor keys to cross line boundaries
    set whichwrap+=<,>,h,l

    " black hole register
    vmap <backspace> "_d
    vmap <del> "_d

    " emacs keymaping for cursor movement{{{
    nmap <c-g> <Esc>
    vmap <c-g> <Esc>
    nmap <c-a> ^
    nmap <c-e> $
    vmap <c-a> ^
    vmap <c-e> $
    inoremap <c-p> <up>
    inoremap <c-n> <down>
    " command line
    cnoremap <C-a> <Home>
    cnoremap <C-e> <End>
    "}}}

    " recent files
    nmap <CR> <space>bb
    vmap <CR> <space>bb

    """"""""""""" Start leader-guide """"""""""""""
    " Define prefix dictionary
    let g:lmap =  {}

    " Second level dictionaries:
    let g:lmap.f = { 'name' : 'File Menu' }
    let g:lmap.o = { 'name' : 'Open Stuff' }
    " 'name' is a special field. It will define the name of the group.
    " leader-f is the "File Menu" group.
    " Unnamed groups will show a default string

    " Provide commands and descriptions for existing mappings
        nmap <silent> <leader>fd :e $MYVIMRC<CR>
        let g:lmap.f.d = ['e $MYVIMRC', 'Open vimrc']

        nmap <silent> <leader>fs :so %<CR>
        " let g:lmap.f.s = ['so %', 'Source file']

        nmap <silent> <leader>oo  :copen<CR>
        " let g:lmap.o.o = ['copen', 'Open quickfix']

        nmap <silent> <leader>ol  :lopen<CR>
        " let g:lmap.o.l = ['lopen', 'Open locationlist']

        nmap <silent> <leader>fw :w<CR>
        " let g:lmap.f.w = ['w', 'Write file']

    " Create new menus not based on existing mappings:
    let g:lmap.g = {
                    \'name' : 'Git Menu',
                    \'s' : ['Gstatus', 'Git Status'],
                    \'p' : ['Gpull',   'Git Pull'],
                    \'u' : ['Gpush',   'Git Push'],
                    \'c' : ['Gcommit', 'Git Commit'],
                    \'w' : ['Gwrite',  'Git Write'],
                    \}

    " If you use NERDCommenter:
    let g:lmap.c = { 'name' : 'Comments' }
    " Define some descriptions
    let g:lmap.c.c = ['call feedkeys("\<Plug>NERDCommenterComment")','Comment']
    let g:lmap.c[' '] = ['call feedkeys("\<Plug>NERDCommenterToggle")','Toggle']
    " The Descriptions for other mappings defined by NerdCommenter, will default
    " to their respective commands.

    call leaderGuide#register_prefix_descriptions("<Space>", "g:lmap")
    nnoremap <silent> <leader> :<c-u>LeaderGuide '<Space>'<CR>
    vnoremap <silent> <leader> :<c-u>LeaderGuideVisual '<Space>'<CR>
    """"""""""""" End leader-guide """"""""""""""


    " Prompt for a command to run
    map <Leader>vp :VimuxPromptCommand<CR>
    " Run last command executed by VimuxRunCommand
    map <Leader>vl :VimuxRunLastCommand<CR>
    " Inspect runner pane
    map <Leader>vi :VimuxInspectRunner<CR>
    " Zoom the tmux runner pane
    map <Leader>vz :VimuxZoomRunner<CR>

    " set GUI font
    if has('gui_running')
      set guioptions-=T  " no toolbar
      set lines=60 columns=108 linespace=0
      if has('gui_win32')
        set guifont=Ubuntu_Mono:h20:cANSI
      else
        set guifont=Ubuntu\ Mono:h20
      endif
    endif
endfunction
