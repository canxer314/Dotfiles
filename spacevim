" You can enable the existing layers in space-vim and
" exclude the partial plugins in a certain layer.
" The command Layer is vaild in the function Layers().
" Use exclude option if you don't want the full Layer,
" e.g., Layer 'better-defaults', { 'exclude': 'itchyny/vim-cursorword' }

" Get OS
function! GetRunningOS()
  if has("win32")
    return "win"
  endif
  if has("unix")
    if system('uname')=~'Darwin'
      return "mac"
    else
      return "linux"
    endif
  endif
endfunction

" Let Vim and NeoVim shares the same plugin directory.
" Comment it out if you don't like
let g:spacevim_plug_home = '~/.vim/plugged'

" The default leader key is space key.
" Uncomment the line below and modify "<\Space>" if you prefer another
" let g:spacevim_leader = "<\Space>"

" The default local leader key is comma.
" Uncomment the line below and modify ',' if you prefer another
" let g:spacevim_localleader = ','

function! Layers()

    Layer 'airline'
    Layer 'fzf'
    Layer 'syntax-checking'
    Layer 'text-align'
    Layer 'unite'
    Layer 'better-defaults', {'exclude': 'dominikduda/vim_current_word'}
    Layer 'file-manager'
    Layer 'ctrlp'
    Layer 'chinese'
    Layer 'programming'
    Layer 'editing'
    Layer 'which-key'

    " Lang
    Layer 'c-c++'
    Layer 'java'
    Layer 'javascript'
    Layer 'typescript'
    Layer 'html'
    Layer 'markdown'
    Layer 'python'

endfunction

" Put your private plugins here.
function! UserInit()

    " Space has been set as the default leader key,
    " if you want to change it, uncomment and set it here.
    " let g:spacevim_leader = "<\Space>"
    " let g:spacevim_localleader = ','

    " ===================================================
    " Install private plugins
    " ===================================================
    Plug 'extr0py/oni'
    Plug 'mileszs/ack.vim'
    Plug 'benmills/vimux'
    Plug 'rakr/vim-one'
    Plug 'Chiel92/vim-autoformat'

    " prettier
    " post install (yarn install | npm install) then load plugin only for editing supported files
    Plug 'prettier/vim-prettier', {
      \ 'do': 'yarn install',
      \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown'] }

    " LSP
    Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }

    if has('nvim')
      Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    else
      Plug 'Shougo/deoplete.nvim'
      Plug 'roxma/nvim-yarp'
      Plug 'roxma/vim-hug-neovim-rpc'
    endif

endfunction

" Put your costom configurations here, e.g., change the colorscheme.
function! UserConfig()
    set nocompatible              " be iMproved, required
    set number
    set noswapfile
    set smartcase

    " Turn off statusbar, because it is externalized
    set noshowmode
    set noruler
    set laststatus=0
    set noshowcmd

    " Enable GUI mouse behavior
    set mouse=a
    "let os = GetRunningOS()

    " ===================================================
    " UI
    " ===================================================
    " set GUI font
    if has('gui_running')
      set guioptions-=T  " no toolbar
      set lines=60 columns=108 linespace=0
      if has('gui_win32')
        set guifont=Operator\ Mono\ Lig:h18:cANSI
      else
        set guifont=Operator\ Mono\ Lig:h18
      endif
    endif

    " theme
    colorscheme one
    set background=light
    let g:one_allow_italics = 1 " I love italic for comments

    " airline setting
    " If you enable airline layer and have installed the powerline fonts, set it here.
    let g:airline_theme='papercolor'
    let g:airline_powerline_fonts = 1
    let g:airline_left_sep = ' '
    let g:airline_right_sep = ' '

    set noundofile

    if (has("termguicolors"))
      set termguicolors
    endif

    " ===================================================
    " AutoFormat
    " ===================================================
    nmap <leader>cp :Prettier<CR>
    vmap <leader>cp :Prettier<CR>

    nmap <leader>cf :Autoformat<CR>

    let g:formatdef_remark_markdown = '"remark --silent --no-color --setting listItemIndent:1 "'

    " ===================================================
    " Search / Quickfix
    " ===================================================
    " Jump to candidate
    autocmd BufReadPost quickfix map <C-j> :.cc<CR>
    autocmd BufReadPost quickfix map <tab> :.cc<CR>

    " From https://github.com/drmingdrmer/vim-toggle-quickfix
    if exists("g:__QUICKFIX_TOGGLE_jfklds__")
        finish
    endif
    let g:__QUICKFIX_TOGGLE_jfklds__ = 1
    fun! s:QuickfixToggle() "{{{
        let nr = winnr("$")
        cwindow
        let nr2 = winnr("$")
        if nr == nr2
            cclose
        endif
    endfunction "}}}
    nnoremap <silent> <Plug>window:quickfix:toggle :call <SID>QuickfixToggle()<CR>

    nmap <leader>' <Plug>window:quickfix:toggle

    " ===================================================
    " fzf start
    " ===================================================
    nmap <Leader><space> :Commands<CR>
    vmap <Leader><space> :Commands<CR>
    map <C-p> :Files<CR>
    if g:spacevim.gui && !has('terminal')
      nnoremap <Leader>ff :LeaderfFile<CR>
      nnoremap <Leader>f~ :LeaderfFile ~<CR>
    else
      nnoremap <Leader>ff :Files<CR>
      nnoremap <Leader>f~ :Files ~<CR>
    endif

    " Use tab to select or Alt-a to select all, and press Enter to
    " put them in the quickfix. Open quickfix with <space>ri.
    " Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
    command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --smart-case --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
      \   <bang>0 ? fzf#vim#with_preview('up:60%')
      \           : fzf#vim#with_preview('right:50%:hidden', '?'),
      \   <bang>0)

    function! s:build_quickfix_list(lines)
      call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
      copen
      cc
    endfunction
    let g:fzf_action = {
      \ 'ctrl-o': function('s:build_quickfix_list'),
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-x': 'split',
      \ 'ctrl-v': 'vsplit' }
    let $FZF_DEFAULT_OPTS = '--bind ctrl-c:select-all'

    " Search with RG
    nnoremap <leader>// :Rg<CR>
    vnoremap <leader>// :Rg<CR>

    " Likewise, Files command with preview window
    command! -bang -nargs=? -complete=dir Files
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
    " ===================================================
    " fzf end
    " ===================================================

    " Allow backspace and cursor keys to cross line boundaries
    set whichwrap+=<,>,h,l

    " black hole register
    vmap <backspace> "_d
    vmap <del> "_d

    " ===================================================
    " LSP config
    " ===================================================
    let g:deoplete#enable_at_startup = 1

    " Some serverCommands options: https://spacevim.org/layers/language-server-protocol/
    " Required for operations modifying multiple buffers like rename.
    set hidden

    let g:LanguageClient_serverCommands = {
        \ 'c': ['ccls', '--log-file=/tmp/cc.log'],
        \ 'cpp': ['ccls', '--log-file=/tmp/cc.log'],
        \ 'cuda': ['ccls', '--log-file=/tmp/cc.log'],
        \ 'objc': ['ccls', '--log-file=/tmp/cc.log'],
        \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
        \ 'javascript': ['javascript-typescript-stdio'],
        \ 'javascript.jsx': ['javascript-typescript-stdio'],
        \ 'python': ['pyls'],
        \ }

    " https://github.com/autozimu/LanguageClient-neovim/issues/379 LSP snippet is not supported
    let g:LanguageClient_hasSnippetSupport = 0

    nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
    nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
    nnoremap <silent> gD :call LanguageClient_textDocument_references()<CR>
    nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>

    " ===================================================
    " emacs keymaping for cursor movement
    " ===================================================
    nmap <c-g> <Esc>
    vmap <c-g> <Esc>
    nmap <c-a> ^
    nmap <c-e> $
    vmap <c-a> ^
    vmap <c-e> $
    inoremap <c-p> <up>
    inoremap <c-n> <down>
    " command line mode
    cmap <C-p> <Up>
    cmap <C-n> <Down>
    cmap <C-b> <Left>
    cmap <C-f> <Right>
    cmap <C-a> <Home>
    cmap <C-e> <End>
    cnoremap <C-d> <Del>
    cnoremap <C-h> <BS>

    " ===================================================
    " Tmux
    " ===================================================
    " Prompt for a command to run
    map <Leader>vp :VimuxPromptCommand<CR>
    " Run last command executed by VimuxRunCommand
    map <Leader>vl :VimuxRunLastCommand<CR>
    " Inspect runner pane
    map <Leader>vi :VimuxInspectRunner<CR>
    " Zoom the tmux runner pane
    map <Leader>vz :VimuxZoomRunner<CR>

    " ===================================================
    " Visual-at
    " ===================================================
    xnoremap @ :<C-u>call ExecuteMacroOverVisualRange()<CR>
    function! ExecuteMacroOverVisualRange()
      echo "@".getcmdline()
      execute ":'<,'>normal @".nr2char(getchar())
    endfunction

endfunction
